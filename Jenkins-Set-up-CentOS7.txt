Jenkins Installation Guide on CentOS-7 Linux System

This guide is intended to succinctly outline the necessary steps for setting up your Jenkins server on a CentOS 7 system. 
It is worth noting that these instructions are applicable to various Linux distributions.

1.- The initial step involves installing Docker. You can obtain all the necessary resources by referring to the following link:
https://docs.docker.com/engine/install/centos/

Set up the repository
$ sudo yum install -y yum-utils
$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

2.- Install Docker Engine
$ sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin


If you encounter "time out" issues in the preceding step, please consider the following information:

2.1.- Modify the file /etc/yum.conf by adding the line "ip_resolve = 4." You can accomplish this by executing:

$ sudo vi /etc/yum.conf 

Once the file is opened, use the "i" key to enter insert mode, navigate to the last line using the arrow keys, and add "ip_resolve = 4." Press "ESC" to return to normal mode, save the changes with ":wq" and press Enter.


2.2.- Verify whether your CentOS machine has a proxy configuration. 

$ env | grep -i proxy
$ cat /etc/environment
$ cat /etc/profile
$ cat /etc/sysconfig/proxy

If your machine is behind a corporate network, configure the proxy settings by adding the following lines:

$ proxy=http://your-proxy-server:port
$ proxy_username=your-username
$ proxy_password=your-password

(If you don't encounter any issues, please proceed with step 3).

3.- Start docker

$ sudo systemctl start docker

4.- Enable Docker to start at system boot.

$ sudo systemctl enable docker

5.- Test installation using "docker ps" command.
$ docker ps
If a permission denied error occurs, resolve it by adding your current user to the Docker group using the Linux command usermod.

$ sudo usermod -aG docker <your_username> 

If you're unsure of your current username, you can use the Linux command:

$ whoami

Afterward, log out and log back in.

$ logout

6.- Re-test the installation using the "docker ps" command.

$ docker ps

If everything is configured correctly, you should see the following output:

$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

7.- Install docker compose
$ sudo curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose

8.- After installation, use the chmod command to add executable permissions:

$ sudo chmod +x /usr/local/bin/docker-compose
$ ls -lh /usr/local/bin/docker-compose  # This is to verify that the `chmod` command worked.
$ docker-compose #Test the installation, a menu will be displayed to confirm that docker-compose is ready to use.


9.- Download Jenkins Docker Image.
$ docker pull jenkins/jenkins

10.- Verify that the image has been downloaded:
$ docker images

11.-Create a folder to store all Jenkins data
$ mkdir jenkins-data

12.- Change to the jenkins-data/ directory
$ cd jenkins-data/

13.- Create the docker-compose.yml file and the jenkins_home directory
$ vi docker-compose.yml 
$ mkdir jenkins_home

14.- Write the below data inside docker-compose.yml

version: '3'

services:
  jenkins:
    # Assigning a specific name to the Jenkins container
    container_name: jenkins
    
    # Using the official Jenkins Docker image from Docker Hub
    image: jenkins/jenkins
    
    # Mapping port 8080 on the host to port 8080 in the container
    ports:
      - "8080:8080"
    
    # Creating a volume to persist Jenkins data outside the container
    volumes:
      - $PWD/jenkins_home:/var/jenkins_home
    
    # Connecting the Jenkins container to the "net" network
    networks:
      - net

networks:
  # Defining a custom network named "net"
  net:

15.- Use the id command to check the Jenkins user's ID.

$ id

The displayed output will be something similar to:
id
uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins),10(wheel),995(docker) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

The uid and gid values are important, and in this case, both are set to 1000.

16.- Change the owner properties of the jenkins_home directory. 
sudo chown 1000:1000 jenkins_home -R

17.- Start the jenkins service defined in docker-compose.yml 

$ docker-compose up -d
[+] Running 2/2
 ✔ Network jenkins-data_net  Created                                                                                                                                                    0.4s
 ✔ Container jenkins         Started 

18.- Use the command "docker ps" to check that the service is running.

19.- To view the logs and find your server password, use the command "docker logs -f jenkins".
$ docker logs -f jenkins

The output will display your Jenkins service running!

20.-The final step is to configure jenkins server on your PC.
Open a web browser on your PC and enter the IP address of your computer (where the Jenkins server is running) along with the port.
All the plugins will be installed.

ip_address:port

Useful Docker commands:
$ docker-compose stop #Stop Jenkins server
$ docker-compose start #Start Jenkins server
$ docker-compose restart jenkins #Reload your Jenkins server.
$ docker-compose down #Delete everything related to the Jenkins server, but not the persistent data inside jenkins-data folder. 
$ docker exec -ti jenkins bash #Move inside the docker container.
$ docker cp script.sh jenkins:/tmp/script.sh # Move the script.sh file into jenkins container in the tmp folder.



